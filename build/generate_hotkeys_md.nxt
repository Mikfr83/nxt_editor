{
    "version": "1.15", 
    "alias": "generate_hotkeys_md", 
    "color": "#6a9932", 
    "mute": false, 
    "solo": false, 
    "meta_data": {
        "positions": {
            "/": [
                0.0, 
                0.0, 
                0.0
            ], 
            "/GenerateHotkeysMD": [
                0.0, 
                0.0
            ], 
            "/UpdateHotkeys": [
                -20.0, 
                -120.0
            ]
        }
    }, 
    "nodes": {
        "/": {
            "attrs": {
                "app": {
                    "type": "NoneType"
                }
            }, 
            "child_order": [
                "GenerateHotkeysMD"
            ], 
            "code": [
                "import os"
            ]
        }, 
        "/GenerateHotkeysMD/Setup": {
            "attrs": {
                "hotkey_map": {
                    "type": "NoneType"
                }, 
                "output_file": {
                    "type": "raw", 
                    "value": "${path::hotkeys.md}"
                }
            }, 
            "child_order": [
                "GenerateMD", 
                "Finish"
            ], 
            "code": [
                "if not STAGE.app:", 
                "    import sys", 
                "    from Qt import QtWidgets", 
                "    try:    ", 
                "        STAGE.app = QtWidgets.QApplication(sys.argv)", 
                "    except RuntimeError:", 
                "        STAGE.app = QtWidgets.QApplication.instance()", 
                "    if not STAGE.app:", 
                "        raise Exception('Failed to setup a QApp')", 
                "from nxt.ui.main_window import MainWindow", 
                "self.hotkey_map = MainWindow().get_hotkey_map()", 
                "self.output_file = os.path.join('${output_dir}', 'hotkeys.md').replace(os.sep, '/')", 
                ""
            ]
        }, 
        "/GenerateHotkeysMD/Setup/Finish": {
            "code": [
                "print('Generated hotkeys at: ${output_file}')"
            ]
        }, 
        "/GenerateHotkeysMD/Setup/GenerateMD": {
            "comment": "Generates a hotkey.md file based on the data given.", 
            "code": [
                "def evaluate_field(record, field_spec):", 
                "    \"\"\"", 
                "    Evalute a field of a record using the type of the field_spec as a guide.", 
                "    \"\"\"", 
                "    if type(field_spec) is int:", 
                "        return str(record[field_spec])", 
                "    elif type(field_spec) is str:", 
                "        return str(getattr(record, field_spec))", 
                "    else:", 
                "        return str(field_spec(record))", 
                "", 
                "", 
                "def table(f, records, fields, headings, alignment=None):", 
                "    \"\"\"", 
                "    Generate a Doxygen-flavor Markdown table from records.", 
                "", 
                "    file -- Any object with a 'write' method that takes a single string", 
                "        parameter.", 
                "    records -- Iterable.  Rows will be generated from this.", 
                "    fields -- List of fields for each row.  Each entry may be an integer,", 
                "        string or a function.  If the entry is an integer, it is assumed to be", 
                "        an index of each record.  If the entry is a string, it is assumed to be", 
                "        a field of each record.  If the entry is a function, it is called with", 
                "        the record and its return value is taken as the value of the field.", 
                "    headings -- List of column headings.", 
                "    alignment - List of pairs alignment characters.  The first of the pair", 
                "        specifies the alignment of the header, (Doxygen won't respect this, but", 
                "        it might look good, the second specifies the alignment of the cells in", 
                "        the column.", 
                "", 
                "        Possible alignment characters are:", 
                "            '<' = Left align (default for cells)", 
                "            '>' = Right align", 
                "            '^' = Center (default for column headings)", 
                "    \"\"\"", 
                "    # Translation dictionaries for table alignment", 
                "    left_rule = {'<': ':', '^': ':', '>': '-'}", 
                "    right_rule = {'<': '-', '^': ':', '>': ':'}", 
                "    num_columns = len(fields)", 
                "    assert len(headings) == num_columns", 
                "", 
                "    # Compute the table cell data", 
                "    columns = [[] for i in range(num_columns)]", 
                "    for record in records:", 
                "        for i, field in enumerate(fields):", 
                "            columns[i].append(evaluate_field(record, field))", 
                "", 
                "    # Fill out any missing alignment characters.", 
                "    extended_align = alignment if alignment != None else []", 
                "    if len(extended_align) > num_columns:", 
                "        extended_align = extended_align[0:num_columns]", 
                "    elif len(extended_align) < num_columns:", 
                "        extended_align += [('^', '<')", 
                "                           for i in range[num_columns-len(extended_align)]]", 
                "", 
                "    heading_align, cell_align = [x for x in zip(*extended_align)]", 
                "", 
                "    field_widths = [len(max(column, key=len)) if len(column) > 0 else 0", 
                "                    for column in columns]", 
                "    heading_widths = [max(len(head), 2) for head in headings]", 
                "    column_widths = [max(x) for x in zip(field_widths, heading_widths)]", 
                "", 
                "    _ = ' | '.join(['{:' + a + str(w) + '}'", 
                "                    for a, w in zip(heading_align, column_widths)])", 
                "    heading_template = '| ' + _ + ' |'", 
                "    _ = ' | '.join(['{:' + a + str(w) + '}'", 
                "                    for a, w in zip(cell_align, column_widths)])", 
                "    row_template = '| ' + _ + ' |'", 
                "", 
                "    _ = ' | '.join([left_rule[a] + '-'*(w-2) + right_rule[a]", 
                "                    for a, w in zip(cell_align, column_widths)])", 
                "    ruling = '| ' + _ + ' |'", 
                "", 
                "    f.write(heading_template.format(*headings).rstrip() + '\\n')", 
                "    f.write(ruling.rstrip() + '\\n')", 
                "    for row in zip(*columns):", 
                "        f.write(row_template.format(*row).rstrip() + '\\n')", 
                "", 
                "headings = ['Name', 'What\\'s this', 'Tool tip', 'Shortcut']", 
                "fields = [0, 1, 2, 3]", 
                "align = [('^', '<'), ('^', '^'), ('^', '<'), ('^', '^'), ('^', '>'),", 
                "         ('^', '^')]", 
                "with open('${output_file}', 'w') as f:", 
                "    f.write('')", 
                "for widget, records in self.hotkey_map.items():", 
                "    with open('${output_file}', 'a') as f:", 
                "        f.write('## '+widget+'\\n')", 
                "        table(f, records, fields, headings, align)", 
                "        f.write('\\n')"
            ]
        }, 
        "/GenerateHotkeysMD": {
            "attrs": {
                "output_dir": {
                    "type": "raw", 
                    "value": "${path::}"
                }
            }, 
            "start_point": true, 
            "child_order": [
                "Setup"
            ]
        }
    }
}